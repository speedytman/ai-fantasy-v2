// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LikeType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  username       String?   @unique
  email          String?   @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  createdBooks  Book[]         @relation("CreatedBy")
  subscriptions Subscription[]
  likes         Like[]

  accounts    Account[]
  sessions    Session[]
  Chapter     Chapter[]
  Comment     Comment[]
  CommentLike CommentLike[]
}

model Book {
  id          String    @id @default(cuid())
  title       String
  description String
  imageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]

  authorId    String?
  Author      User?          @relation("CreatedBy", fields: [authorId], references: [id])
  subscribers Subscription[]

  @@index([title])
}

model Subscription {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  @@id([userId, bookId])
}

model Chapter {
  id        String    @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  book      Book      @relation(fields: [bookId], references: [id])
  bookId    String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  likes    CommentLike[]
  comentId String?
}

model Like {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String
  type      LikeType

  @@id([userId, chapterId])
}

model CommentLike {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      LikeType

  @@id([userId, commentId])
}
